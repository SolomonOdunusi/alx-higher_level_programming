# 0-add_integer.txt

# Test Cases For add_integer.py

Usage: python3 -m doctest -v ./tests/0-add_integer.txt

add_integer: add two integers

*

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

The func works with negative numbers

*

    >>> add_integer(100, -2)
    98

The func works with floats

*

    >>> add_integer(2.5, 2)
    4

The func works with floats

*

    >>> add_integer(2.5, 2.5)
    4

The func works with negative floats

*

    >>> add_integer(-2.5, -2.5)
    -4

The func works with one argument

*

    >>> add_integer(2)
    100

Expected type error
====================

```add_integer(...)``` raises a TypeError exception with the message 
a must be an integer if a is not an integer

*

    >>> add_integer("solomon", 2)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

*

    >>> add_integer(2, "alx")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

*
    
    >>> add_integer(2, [1, 2, 3])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

*
    
    >>> add_integer(2, (1, 2, 3))
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

*
        
    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

*
            
    >>> add_integer(2, None)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

*

    >>> add_integer("solomon", "alx")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

*

    >>> add_integer(float('inf'), 2)
    Traceback (most recent call last):
        ...
    OverflowError: int too large to convert to float

*

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer

